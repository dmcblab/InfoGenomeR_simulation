configfile: "workflow/configs/config.yaml"

wildcard_constraints:
    root="[^/]+",
    haplotype_name=".+",

rule all:

rule InfoGenomeR_simulation_env:
    conda:
        "envs/simulation.yaml"
    shell:
        "bash workflow/scripts/InfoGenomeR_simulation_env.sh"

# Rule: InfoGenomeR_download
rule InfoGenomeR_download:
    output:
        haplotype_dir=directory(Path(workflow.basedir) / f"../humandb/{config['ref']}/1000G"),
    conda:
        "envs/simulation.yaml"
    shell:
        "workflow/scripts/1000G_download.sh {output.haplotype_dir}"

# Rule: Haplotype_selection
rule Haplotype_selection:
    conda:
        "envs/simulation.yaml"
    input:
        haplotype_dir=lambda wildcards: os.path.abspath(f"{wildcards.root}/1000G")
    output:
        haplotype_selected_output=directory("{root}/haplotype_selected/{haplotype_name}_selection")
    shell:
        """
        workflow/scripts/haplotype_select.sh {input.haplotype_dir} {wildcards.haplotype_name} {output.haplotype_selected_output}
        """



# Rule: haplotype_selection_postprocess
rule Haplotype_selection_postprocess:
    conda:
        "envs/simulation.yaml"
    input:
        humandb=lambda wildcards: Path(workflow.basedir) / "../humandb",
        haplotype_selected_output=rules.Haplotype_selection.output.haplotype_selected_output
    params:
        ref=config["ref"],
    output:
        haplotype_postprocess=directory("{root}/haplotype_selected/{haplotype_name}_postprocess")
    shell:
        """
        workflow/scripts/perl_fasta_index.sh {input.haplotype_selected_output} {wildcards.haplotype_name} {output.haplotype_postprocess} {params.ref}
        workflow/scripts/haplotype_select_job.sh {input.haplotype_selected_output} {wildcards.haplotype_name} {output.haplotype_postprocess} {params.ref}
        """



# Rule: InfoGenomeR_simulation
rule InfoGenomeR_simulation:
    conda:
        "envs/simulation.yaml"
    params:
        haplotype=config["haplotype"],
        SV=config["SV"]
    shell:
        """
        workflow/scripts/SVs_to_fa.sh {params.haplotype} {params.SV}
        """

# Rule: InfoGenomeR_art
rule InfoGenomeR_art:
    conda:
        "envs/simulation.yaml"
    params:
        purity=config["purity"],
        coverage=config["coverage"]
    shell:
        """
        workflow/scripts/art.sh {params.mosaicism} {params.coverage}
        """

